version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: node-js-test-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: node_js_test
      MYSQL_USER: app_user
      MYSQL_PASSWORD: app_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: node-js-test-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 30s

  # Node.js API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: node-js-test-api
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: node_js_test
      DB_USER: app_user
      DB_PASSWORD: app_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      GITHUB_API_URL: https://api.github.com
      CACHE_TTL: 600
      JWT_SECRET: your-super-secret-key-here
      LOG_LEVEL: info
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s

  # Database Migration and Seeding Service (runs once)
  migrator:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: node-js-test-migrator
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: node_js_test
      DB_USER: app_user
      DB_PASSWORD: app_password
    volumes:
      - ./src/database:/app/src/database
    networks:
      - app-network
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        sleep 10 &&
        echo 'Running database migrations...' &&
        npm run db:migrate &&
        echo 'Running database seeds...' &&
        npm run db:seed &&
        echo 'Database setup completed!'
      "
    restart: "no"

networks:
  app-network:
    driver: bridge
    name: node-js-test-network

volumes:
  mysql_data:
    name: node-js-test-mysql-data
  redis_data:
    name: node-js-test-redis-data
